# Generated by Django 3.1.2 on 2020-10-08 10:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import main.components
import markdownx.models
import simple_history.models
import taggit.managers
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('main', '0002_historicaluser'),
    ]

    operations = [
        migrations.CreateModel(
            name='Articles',
            fields=[
                ('dt_created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('dt_modified', models.DateTimeField(auto_now=True, verbose_name='Modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(max_length=64, verbose_name='Slug')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=models.SET(main.components.get_sentinel_user), related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Category Name')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalArticles',
            fields=[
                ('dt_created', models.DateTimeField(blank=True, editable=False, verbose_name='Created')),
                ('dt_modified', models.DateTimeField(blank=True, editable=False, verbose_name='Modified')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('is_active', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('slug', models.SlugField(max_length=64, verbose_name='Slug')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'History',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPage',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('dt_created', models.DateTimeField(blank=True, editable=False, verbose_name='Created')),
                ('dt_modified', models.DateTimeField(blank=True, editable=False, verbose_name='Modified')),
                ('label', models.CharField(db_index=True, max_length=64, verbose_name='Label')),
                ('content', markdownx.models.MarkdownxField(verbose_name='Content')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'History',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Icons',
            fields=[
                ('name', models.CharField(max_length=64, primary_key=True, serialize=False, verbose_name='Icon Name')),
                ('svg', models.TextField(verbose_name='SVG')),
            ],
        ),
        migrations.CreateModel(
            name='Messages',
            fields=[
                ('dt_created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('dt_modified', models.DateTimeField(auto_now=True, verbose_name='Modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Name')),
                ('email', models.EmailField(blank=True, max_length=64, null=True, verbose_name='Email')),
                ('topic', models.CharField(max_length=255, verbose_name='Topic')),
                ('text', models.TextField(verbose_name='Message')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=models.SET(main.components.get_sentinel_user), related_name='+', to=settings.AUTH_USER_MODEL)),
                ('to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt_created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('dt_modified', models.DateTimeField(auto_now=True, verbose_name='Modified')),
                ('label', models.CharField(db_index=True, max_length=64, verbose_name='Label')),
                ('content', markdownx.models.MarkdownxField(verbose_name='Content')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=models.SET(main.components.get_sentinel_user), related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='pagemodel',
            name='created_by',
        ),
        migrations.DeleteModel(
            name='HistoricalPageModel',
        ),
        migrations.DeleteModel(
            name='PageModel',
        ),
        migrations.AddField(
            model_name='historicalarticles',
            name='page',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.page'),
        ),
        migrations.AddField(
            model_name='categories',
            name='svg',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='main.icons'),
        ),
        migrations.AddField(
            model_name='articles',
            name='page',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='main.page'),
        ),
        migrations.AddField(
            model_name='articles',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
